name: CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      - name: Check formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Code is not formatted. Please run 'make fmt'"
            gofmt -d .
            exit 1
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21', '1.22']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: go test -v -short -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        if: matrix.go-version == '1.21'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}

  yaegi-compatibility:
    name: Yaegi Compatibility
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}/go
    defaults:
      run:
        working-directory: ${{ github.workspace }}/go/src/github.com/${{ github.repository }}
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: go/src/github.com/${{ github.repository }}

      - name: Install Yaegi
        run: go install github.com/traefik/yaegi/cmd/yaegi@latest

      - name: Setup GOPATH
        run: go env -w GOPATH=${{ github.workspace }}/go

      - name: Test with Yaegi
        run: |
          # Vendor dependencies for Yaegi
          go mod vendor

          # Run yaegi tests with proper GOPATH
          yaegi test -v .
        env:
          GOPATH: ${{ github.workspace }}/go

  plugin-validation:
    name: Plugin Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate .traefik.yml
        run: |
          if [ ! -f ".traefik.yml" ]; then
            echo "Error: .traefik.yml not found"
            exit 1
          fi
          echo "✓ .traefik.yml exists"

      - name: Validate go.mod
        run: |
          if [ ! -f "go.mod" ]; then
            echo "Error: go.mod not found"
            exit 1
          fi
          echo "✓ go.mod exists"

      - name: Check vendor directory
        run: |
          go mod vendor
          if [ ! -d "vendor" ]; then
            echo "Warning: vendor directory not created"
          fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: '-fmt json -out gosec-report.json -exclude=G115,G304,G307 ./...'

      - name: Upload Gosec results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gosec-report
          path: gosec-report.json

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Bootstrap Token
        id: check-token
        run: |
          if [ -z "${{ secrets.BOOTSTRAP_TOKEN }}" ]; then
            echo "has-token=false" >> $GITHUB_OUTPUT
            echo "::warning::BOOTSTRAP_TOKEN secret not set - E2E tests will be skipped"
            echo "::warning::To run E2E tests, add BOOTSTRAP_TOKEN to Settings → Secrets → Actions"
          else
            echo "has-token=true" >> $GITHUB_OUTPUT
            echo "Bootstrap token found - E2E tests will run"
          fi

      - name: Set up Go
        if: steps.check-token.outputs.has-token == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      - name: Set up Docker Buildx
        if: steps.check-token.outputs.has-token == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Prepare configuration
        if: steps.check-token.outputs.has-token == 'true'
        run: |
          # Token is available (already checked)
          export BOOTSTRAP_TOKEN="${{ secrets.BOOTSTRAP_TOKEN }}"

          # Generate config from template
          echo "Generating traefik-dynamic.yml from template..."
          envsubst < ci/traefik-dynamic.yml.template > ci/traefik-dynamic.yml

          # Verify substitution worked
          echo "Verifying token substitution..."
          if grep -q '$BOOTSTRAP_TOKEN' ci/traefik-dynamic.yml; then
            echo "::error::Token substitution failed - template variable still present"
            cat ci/traefik-dynamic.yml | head -20
            exit 1
          fi

          echo "Configuration generated successfully with bootstrap token"

      - name: Start services
        if: steps.check-token.outputs.has-token == 'true'
        run: |
          docker compose -f ci/docker-compose.test.yml up -d traefik whoami whoami-xff
        env:
          BOOTSTRAP_TOKEN: ${{ secrets.BOOTSTRAP_TOKEN }}

      - name: Wait for services
        if: steps.check-token.outputs.has-token == 'true'
        run: |
          echo "Waiting for Traefik to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:18081/api/overview 2>/dev/null; then
              echo "Traefik is ready"
              break
            fi
            echo "Waiting for Traefik... ($i/30)"
            sleep 2
          done

      - name: Run E2E tests
        if: steps.check-token.outputs.has-token == 'true'
        run: |
          cd ci/e2e
          go test -v -tags=e2e ./...
        env:
          TRAEFIK_URL: http://localhost:8080
          WHOAMI_HOST: whoami.localhost
          WHOAMI_XFF_HOST: whoami-xff.localhost

      - name: Show Traefik logs on failure
        if: failure() && steps.check-token.outputs.has-token == 'true'
        run: docker compose -f ci/docker-compose.test.yml logs traefik

      - name: Clean up
        if: always() && steps.check-token.outputs.has-token == 'true'
        run: docker compose -f ci/docker-compose.test.yml down -v

      - name: Skip message
        if: steps.check-token.outputs.has-token == 'false'
        run: |
          echo "::notice::E2E tests were skipped because BOOTSTRAP_TOKEN secret is not configured"
          echo "::notice::This is expected for external contributors. Maintainers should configure the secret."

  benchmark:
    name: Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            **/go.sum

      - name: Run benchmarks
        run: go test -run=^$ -bench=. -benchmem ./... | tee benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt
